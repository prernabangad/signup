{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["emailRegex","RegExp","App","props","handleSubmit","e","preventDefault","formErrors","rest","valid","Object","values","forEach","val","length","formValid","state","console","error","log","firstName","lastName","email","password","handleChange","target","name","value","test","setState","this","className","onSubmit","noValidate","htmlFor","placeholder","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b8e5c325.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nconst emailRegex = RegExp(\n  /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n);\n\nconst formValid = ({ formErrors, ...rest }) => {\n  let valid = true;\n\n  // validate form errors being empty\n  Object.values(formErrors).forEach(val => {\n    val.length > 0 && (valid = false);\n  });\n\n  // validate the form was filled out\n  Object.values(rest).forEach(val => {\n    val === null && (valid = false);\n  });\n\n  return valid;\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      firstName: null,\n      lastName: null,\n      email: null,\n      password: null,\n      formErrors: {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\"\n      }\n    };\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    if (formValid(this.state)) {\n      console.log(`\n        --SUBMITTING--\n        First Name: ${this.state.firstName}\n        Last Name: ${this.state.lastName}\n        Email: ${this.state.email}\n        Password: ${this.state.password}\n      `);\n    } else {\n      console.error(\"FORM INVALID - DISPLAY ERROR MESSAGE\");\n    }\n  };\n\n  handleChange = e => {\n    e.preventDefault();\n    const { name, value } = e.target;\n    let formErrors = { ...this.state.formErrors };\n\n    switch (name) {\n      case \"firstName\":\n        formErrors.firstName =\n          value.length < 3 ? \"minimum 3 characaters required\" : \"\";\n        break;\n      case \"lastName\":\n        formErrors.lastName =\n          value.length < 3 ? \"minimum 3 characaters required\" : \"\";\n        break;\n      case \"email\":\n        formErrors.email = emailRegex.test(value)\n          ? \"\"\n          : \"invalid email address\";\n        break;\n      case \"password\":\n        formErrors.password =\n          value.length < 6 ? \"minimum 6 characaters required\" : \"\";\n        break;\n      default:\n        break;\n    }\n\n    this.setState({ formErrors, [name]: value }, () => console.log(this.state));\n  };\n\n  render() {\n    const { formErrors } = this.state;\n\n    return (\n      \n      <div className=\"wrapper\">\n        <div className=\"form-wrapper\">\n          <h1>SIGN UP</h1>\n          <form onSubmit={this.handleSubmit} noValidate>\n            <div className=\"firstName\">\n              <label htmlFor=\"firstName\">First Name</label>\n              <input\n                className={formErrors.firstName.length > 0 ? \"error\" : null}\n                placeholder=\"First Name\"\n                type=\"text\"\n                name=\"firstName\"\n                noValidate\n                onChange={this.handleChange}\n              />\n              {formErrors.firstName.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.firstName}</span>\n              )}\n            </div>\n            <div className=\"lastName\">\n              <label htmlFor=\"lastName\">Last Name</label>\n              <input\n                className={formErrors.lastName.length > 0 ? \"error\" : null}\n                placeholder=\"Last Name\"\n                type=\"text\"\n                name=\"lastName\"\n                noValidate\n                onChange={this.handleChange}\n              />\n              {formErrors.lastName.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.lastName}</span>\n              )}\n            </div>\n            <div className=\"email\">\n              <label htmlFor=\"email\">Email</label>\n              <input\n                className={formErrors.email.length > 0 ? \"error\" : null}\n                placeholder=\"Email\"\n                type=\"email\"\n                name=\"email\"\n                noValidate\n                onChange={this.handleChange}\n              />\n              {formErrors.email.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.email}</span>\n              )}\n            </div>\n            <div className=\"password\">\n              <label htmlFor=\"password\">Password</label>\n              <input\n                className={formErrors.password.length > 0 ? \"error\" : null}\n                placeholder=\"Password\"\n                type=\"password\"\n                name=\"password\"\n                noValidate\n                onChange={this.handleChange}\n              />\n              {formErrors.password.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.password}</span>\n              )}\n            </div>\n            <div className=\"createAccount\">\n              <button type=\"submit\">Create Account</button>\n              <small>Already Have an Account?</small>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}